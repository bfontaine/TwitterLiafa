== Cache ==

cache_following.json : [ [id1, id2], … ]
    Ensemble de paires d'ids, pour chacune, chaque id correspond à un compte,
    le premier suivant le second.

cache_ids.json : { username:id, … }
    Dictionnaire associant chaque nom de compte à son id


== Optimisation des requêtes ==

Requêtes/Heure:
      350 (@dadbs)
    + 350 (@newsp7)
    + 350 (@prischka)
    + 150 (non authentifiées)
  =  1200

Nombre de comptes dans tous les graphes: 7,215
Récupérer followers/following: 14,430 requêtes (hors gros comptes)
Récupérer les paires id/pseudo: ≤100 comptes/requête → 73 requêtes
Total: ~ 14,503 requêtes

Heuristiques pour limiter les requêtes :

- Récupérer uniquement les 'friends' pour chaque compte, vu qu'on ne veut
que les relations inter-graphes, si on sait que A suit B, pas besoin d'une
requête supplémentaire pour savoir que B est suivi par A.
Économie: 7,215 requêtes

- Ne pas récupérer les données pour les comptes solitaires dans les graphes.
Économie: ~4000 requêtes (si 30% des comptes sont solitaires)
    -> Mauvaise idée, puisque ces comptes sont solitaires avant le spread,
        mais peut-être pas au niveau des RT

- Pour les gros comptes, si tous les membres du graphe ne sont pas dans les
5000 derniers friends/followers, faire au cas-par-cas (une requête pour chaque
relation).
Économie: ?

